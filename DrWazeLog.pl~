% Hecho       : rutaInversa
% Descripción : Es un hecho dinámico usado para guardar las rutas con
%                  menos costo entre los nodos del grafo

:- dynamic
	rutaInversa/2.

% Regla       : verRutasCortas
% Entradas    : RutaInversa -> Lista de la ruta con nodos del grafo
%               Costo -> Sumatoria de los costos de la ruta
% Descripción : Tendrá éxito si la ruta inversa dada junto a su costo es
%                  un hecho en la base de datos dinámica

verRutasCortas(RutaInversa,Costo):-
	rutaInversa(RutaInversa,Costo).

% Hecho       : ruta
% Descripción : Representa todas las direcciones (arcos) disponibles
%                  entre los lugares del mapa y su respectivo costo.

ruta(cartago, paraiso, 10).
ruta(cartago, pacayas, 13).
ruta(cartago, tres_rios, 8).
ruta(cartago, san_jose, 20).
ruta(cartago, musgo_verde, 10).
ruta(pacayas, cervantes, 8).
ruta(pacayas, cartago, 13).
ruta(pacayas, tres_rios, 15).
ruta(cervantes, juan_vinas, 5).
ruta(cervantes, cachi, 7).
ruta(cervantes, pacayas, 8).
ruta(turrialba, pacayas, 18).
ruta(juan_vinas, turrialba, 4).
ruta(paraiso, cervantes, 4).
ruta(paraiso, cachi, 10).
ruta(paraiso, orosi, 8).
ruta(san_jose, corralillo, 22).
ruta(san_jose, cartago, 20).
ruta(tres_rios, san_jose, 8).
ruta(musgo_verde, cartago, 10).
ruta(musgo_verde, corralillo, 6).
ruta(corralillo, musgo_verde, 6).
ruta(corralillo, san_jose, 22).
ruta(orosi, paraiso, 8).
ruta(orosi, cachi, 12).
ruta(cachi, turrialba, 40).
ruta(cachi, cervantes, 7).
ruta(cachi, paraiso, 10).
ruta(cachi, orosi, 12).

% Regla       : viajar

% Entradas    : Inicio -> Punto de inicio en el mapa
%               Final -> Punto de llegada en el mapa
% Descripción : Tendrá éxito si encuentra alguna ruta entre el punto
%		   inicial y el final y la retorna al cliente en la
%		   consola

viajar(Inicio, Final):-
	recorrer(Inicio),
	rutaInversa([Final|RutaInversa], Costo),
	inversa([Final|RutaInversa], Ruta),
	CostoSumado is round(Costo),
	write('La mejor ruta para ir desde '),
	write(Inicio),
	write(' hasta '),
	write(Final),
	write(' es '),
	escribirRuta(Ruta),
	write(', con un costo de '),
	write(CostoSumado),
	write(' horas.\n').

% Entradas    : Inicio -> Punto de inicio en el mapa
%               Final -> Punto de llegada en el mapa
% Descripción : Tendrá éxito si no encuentra alguna ruta entre el punto
%		   inicial y el final e imprime el error en la consola

viajar(Inicio, Final):-
	write('No hay rutas para ir desde '),
	write(Inicio),
	write(' hasta '),
        write(Final),
	write(' .\n').

% Entradas    : Inicio -> Punto de inicio en el mapa
%               Final -> Punto de llegada en el mapa
% Descripción : Condición de parada para 'viajar' con puntos intermedios

viajar(Inicio, [], Final):-
	viajar(Inicio, Final).

% Entradas    : Inicio -> Punto de inicio en el mapa
%               Siguiente -> Primer punto intermedio en el viaje
%               Demas -> Resto de puntos intermedios en el viaje
%               Final -> Punto de llegada en el mapa
% Descripción : Tendrá éxito si encuentra rutas entre el punto de inicio
%	           y el primer punto intermedio, y este con el siguiente
%	           punto intermedio, etc; y si existe una ruta entre el
%	           último punto intermedio y el punto de llegada.

viajar(Inicio, [Siguiente|Demas], Final):-
	viajar(Inicio, Siguiente),
	viajar(Siguiente, Demas, Final).

% Regla       : recorrer

% Entradas    : Inicio -> Punto actual en el mapa
%               Ruta -> Camino seguido hasta el punto actual en el mapa
%               Costo -> Costo de la ruta actual analizada
% Descripción : Tendrá éxito y procederá a buscar las rutas más cortas
%		   próximas al punto actual si existe algún punto
%		   vecino al punto actual que no sea miembro de la ruta
%		   ya analizada

recorrer(Inicio, Ruta, Costo):-
	ruta(Inicio, RutaEncontrada, CostoEncontrada),
	not(miembro(RutaEncontrada, Ruta)),
	rutaMasCorta([RutaEncontrada, Inicio|Ruta], Costo + CostoEncontrada),
	recorrer(RutaEncontrada, [Inicio|Ruta], Costo + CostoEncontrada).

% Entradas    : Inicio -> Punto de inicio en el mapa
% Descripción : Limpia la base de datos e inicia el recorrido del mapa
%                  para encontrar las nuevas rutas más cortas

recorrer(Inicio):-
	retractall(rutaInversa(_, _)),
	recorrer(Inicio, [], 0).

% Entradas    : Un elemento cualquiera (punto inicial por defecto)
% Descripción : Punto de parada para el recorrido y el backtracking del
%                  mapa en busca de las rutas más cortas

recorrer(_).

% Regla       : miembro

% Entradas    : Inicio -> Elemento cualquiera que representa el primer
%	           argumento y la cabeza de la lista en el segundo
%	           argumento.
% Descripción : Tendrá éxito si la cabeza de la
%	           lista y el elemento solicitado son iguales


miembro(Elemento, [Elemento|_]).

% Entradas    : Elemento -> Elemento a encontrar en la lista
%		Cola -> Cola de la lista en la que se quiere buscar el
%		   elemento
% Descripción : Vuelve a llamar a la regla miembro con la cola de la
%		   lista como la nueva lista, hasta que esta sea nula o
%		   su cabeza sea el elemento que se busca

miembro(Elemento, [_|Cola]):- miembro(Elemento, Cola).

% Regla       : rutaMasCorta

% Entradas    : Primera -> Nodo del grafo al que va a buscar una ruta más
%		   corta de la existente
%		Ruta -> Camino seguido hasta el nodo actual que se está
%		   actualizando
% Descripción :

rutaMasCorta([Primer|Ruta], Costo):-
	rutaInversa([Primer|_], CostoEncontrado), !,
	Costo < CostoEncontrado,
        retract(rutaInversa([Primer|_], _)),
	assert(rutaInversa([Primer|Ruta], Costo)).

% Entradas    : Ruta ->
%               Costo ->
%
% Descripción :

rutaMasCorta(Ruta, Costo):-
	assert(rutaInversa(Ruta,Costo)).

inversa(Lista1, Lista2):- inversa(Lista1, [], Lista2).
inversa([], Lista, Lista).
inversa([Primer1|Cola1], Lista2, Lista3):- inversa(Cola1, [Primer1|Lista2], Lista3).

escribirRuta([Primer|Ruta]):-
	write(Primer),
	escribirRutaAux(Ruta).

escribirRutaAux([]):- write('').
escribirRutaAux([Siguiente|Ruta]):-
	write(' -> '),
	write(Siguiente),
	escribirRutaAux(Ruta).

